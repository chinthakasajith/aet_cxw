(function(module) {
  module.controller('MissionController', ['$scope', '$stateParams', 'missionQuestions', 'alertsService', 'missionQuestionService', '$state', 'uploadManager', 's3Uploader', 's3config',
    function($scope, $stateParams, missionQuestions, alertsService, missionQuestionService, $state, uploadManager, s3Uploader, s3config) {

      $scope.mission = missionQuestions;

      $scope.loader = false;

      $scope.item = 0;
      //$scope.isNextDisabled = false;
      $scope.isPreviousDisabled = true;
      //$scope.isFinishDisabled = true;
      var sizeOfMissionActions = $scope.mission.actions.length;

      if (sizeOfMissionActions > 1) {
        $scope.isFinished = false;
        $scope.isNextDisabled = true;
        $scope.isFinishDisabled = false;
      } else {
        $scope.isFinished = true;
        $scope.isNextDisabled = false;
        $scope.isFinishDisabled = true;
      }

      $scope.select = function(index, first, last) {
        $scope.item = index;
        if (first === true && last === false) {
          $scope.isNextDisabled = false;
          $scope.isPreviousDisabled = true;
          $scope.isFinished = false;
        }
        if (first === false && last === false) {
          $scope.isNextDisabled = false;
          $scope.isPreviousDisabled = false;
          $scope.isFinished = false;
        }
        if (last === true && first === false) {
          $scope.isNextDisabled = true;
          $scope.isPreviousDisabled = false;
          $scope.isFinished = true;
        }
      };

      $scope.next = function() {
        window.scrollTo(0, 0);
        submitAnswers($scope.mission.actions[$scope.item], false);
        if ($scope.item < (sizeOfMissionActions - 1)) {
          $scope.item = $scope.item + 1;
          $scope.isPreviousDisabled = false;
        }
        if ($scope.item === (sizeOfMissionActions - 1)) {
          $scope.isNextDisabled = true;
          $scope.isPreviousDisabled = false;
          $scope.isFinished = true;
        }
      };

      $scope.previous = function() {
        submitAnswers($scope.mission.actions[$scope.item], false);
        if (sizeOfMissionActions > $scope.item && $scope.item !== 0) {
          $scope.item = $scope.item - 1;
          $scope.isNextDisabled = false;
          $scope.isFinished = false;
        }
        if ($scope.item == 0) {
          $scope.isPreviousDisabled = true;
        }
      };

      $scope.finish = function() {
        submitAnswers($scope.mission.actions[$scope.item], true);
      }

      $scope.isAnswerComplete = function() {
        var isAnswerComplete = true;
        angular.forEach($scope.mission.actions[$scope.item].questions, function(question, key) {
          if (angular.equals(question.inputType, 'SLIDER') && angular.equals(question.answer, '0')) {
            isAnswerComplete = false;
          }
          if (angular.equals(question.inputType, 'TEXTBOX') && angular.isDefined(question.answer)) {
            var textAnswerCount = question.answer.length;
            if (textAnswerCount > 2000) {
              isAnswerComplete = false;
            }

          }
        });
        return isAnswerComplete;
      };

      function submitAnswers(actionAnswers, send) {
        if (send) {
          $scope.loader = true;
        };
        missionQuestionService.updateMissionQuestion(actionAnswers, send).then(function(response) {
          alertsService.addAlert({
            title: 'Success',
            message: 'Answers successfully updated',
            type: 'success',
            removeOnStateChange: 2
          });
          if (angular.equals(send, true)) {
            $state.go('index.thank', {
              token: $stateParams.token
            });
          }
        }, function(err) {
          $scope.loader = false;
        });

      }

      /*S3 implementation*/
      $scope.downloadFile = function(uri) {
        s3Uploader.getDownloadSignature(uri).then(function(response) {
          window.open(response.data.downloadLink, '_blank');
        }, function(err) {
          $log.error("Could not save application", err);
        })
      };

      var uploadOptions = {
        destroyWithScope: $scope,
        bucket: s3config(),
        acl: 'public-read',
        folder: 'feedback/',
        maxsize: '50',
        fileTypes: ['gif', 'jpg', 'jpeg', 'png', 'gif', 'ico', 'svg', 'psd', 'raw', 'tiff', 'mp3', 'm4a', 'm4b', 'm4p', 'm4v', 'ogg', 'wav', 'mp4', 'm4v', 'mov', 'wmv', 'avi', 'mpg', 'mpeg', 'ogv', '3gp', '3g2', '3gpp', '3gp2', 'aiff', 'aif', 'aifc', 'cdda', 'amr', 'swa', 'flac', 'pdf', 'doc', 'docx', 'txt', 'rtf']
      };

      $scope.uploadManager = uploadManager.newS3UploadId(uploadOptions);

      $scope.getFileName = function(fileURL) {
        if (!fileURL) {
          return '';
        }
        var fileName = fileURL.split("/").pop();
        fileName = fileName.substring(fileName.indexOf("_") + 1);
        return fileName.substring(0, fileName.lastIndexOf('.'));
      };

      $scope.$watch('mission', function(newVal, oldVal) {
        angular.forEach($scope.mission.actions, function(action) {
          if ((!angular.equals($scope.mission.actions[$scope.item].actionId, action.actionId))) {
            angular.forEach(action.questions, function(question, qkey) {
              if (angular.equals('FILEUPLOAD', question.inputType)) {
                question.answer = angular.copy(question.previousAnswer);
              }
            });
          } else {
            angular.forEach(action.questions, function(question, qkey) {
              if (angular.equals('FILEUPLOAD', question.inputType)) {
                question.previousAnswer = angular.copy(question.answer);
              }
            });
          }
        });
      }, true);

    }
  ]);

})(angular.module('aet-screens-mission'));
