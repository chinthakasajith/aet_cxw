(function(module) {

  module.controller('CreateListsEmployeeController', ['$scope', '$rootScope', 'ListEmployee', 'userDetails', 'listEmployeeService', 'alertsService', '$modal', '$state', '$log', 'modalService', 'CSVDataObject',
    function($scope, $rootScope, ListEmployee, userDetails, listEmployeeService, alertsService, $modal, $state, $log, modalService, CSVDataObject) {

      $scope.listEmployee = new ListEmployee();
      $scope.listEmployee.creatorId = userDetails.getUserId();

      $scope.emailList = {};
      $scope.emailList.uniqueUsers = [];
      $scope.emailList.duplicateUsers = [];

      $scope.uniqueDisplayed = 25;
      $('.infinite-scroll').on('scroll', function() {
        if ($(this).scrollTop() + $(this).innerHeight() >= this.scrollHeight) {
          $scope.uniqueDisplayed += 25;
          $scope.$apply();
        }
      })

      $scope.$watch('fileContent', function() {
        if (angular.isDefined($scope.fileContent)) {
          sendCSVFile();
        }
      });

      $scope.isValidList = function() {
        var isValidList = false;
        if ($scope.emailList.uniqueUsers.length > 0 && angular.isDefined($scope.listEmployee.title)) {
          isValidList = true;
        }
        return isValidList;
      }



      function getFullList(data) {
        var list = angular.copy(data.uniqueUsers);
        angular.forEach($scope.emailList.duplicateUsers, function(duplicateData, duplicateDataKey) {
          angular.forEach(duplicateData.users, function(user, userKey) {
            list.push(user);
          });
        });
        return list;
      }

      var CSVDataObject = new CSVDataObject();

      var sendCSVFile = function() {
        $rootScope.showLoader("Processing CSV...");

        CSVDataObject.csvContent = angular.toJson($scope.fileContent).replace(/(^"|"$)/g, '');
        CSVDataObject.externalUsers = $scope.emailList.uniqueUsers;

        listEmployeeService.uploadExternalUsers(CSVDataObject).then(function(retrivalObjects) {

          $scope.isDuplicateValuesShowing = false;
          $scope.isWarningMsgCanceled = false;
          $scope.emailList = angular.copy(retrivalObjects);

          $rootScope.hideLoader();
        }, function(err) {
          $rootScope.hideLoader();
        });

      }

      var sendManuallyAddedRow = function(manuallyAddedRecord) {
        $rootScope.showLoader("Processing email...");

        var externalUsersObject = new Object();
        externalUsersObject.externalUsers = angular.copy($scope.emailList.uniqueUsers);
        externalUsersObject.externalUsers.push(manuallyAddedRecord);
        angular.forEach($scope.emailList.duplicateUsers, function(duplicateData, duplicateDataKey) {
          angular.forEach(duplicateData.users, function(user, userKey) {
            externalUsersObject.externalUsers.push(user);
          });
        });

        listEmployeeService.uploadExternalUsers(externalUsersObject).then(function(retrivalObjects) {
          //$scope.csvDatas = retrivalObjects.uniqueUsers;
          //$scope.duplicateDatas = retrivalObjects.duplicateUsers;
          $scope.emailList = angular.copy(retrivalObjects);
          $rootScope.hideLoader();
        }, function(err) {
          $rootScope.hideLoader();
        });


      }

      $scope.isDuplicateValuesShowing = false;
      $scope.isWarningMsgCanceled = false;
      $scope.isDuplicateValuesResolved = false;

      $scope.hideDuplicateValues = function() {
        $scope.isDuplicateValuesShowing = false;
      }

      $scope.showDuplicateValues = function() {
        $scope.isDuplicateValuesShowing = true;
      }

      $scope.showWarningMsg = function() {
        var isShowingWarningMsg = false;
        if (!$scope.isWarningMsgCanceled && !$scope.isDuplicateValuesShowing && $scope.emailList.duplicateUsers.length > 0) {
          isShowingWarningMsg = true;
        }
        return isShowingWarningMsg;
      }

      $scope.cancelWarningMsg = function() {
        $scope.isWarningMsgCanceled = true;
        angular.forEach($scope.emailList.duplicateUsers, function(duplicateData, duplicateDataKey) {
          angular.forEach(duplicateData.users, function(user, userKey) {
            $scope.emailList.uniqueUsers.push(user);
          });
          duplicateData.users = undefined;
        });
      }

      $scope.manuallyAddedRowValidation = function() {
        var isManuallyAddingRecordButtonValidated = false;
        if (angular.isDefined($scope.manuallyAddedFirstName) && angular.isDefined($scope.manuallyAddedEmailAddress)) {
          isManuallyAddingRecordButtonValidated = true;
        }
        return isManuallyAddingRecordButtonValidated;
      }

      $scope.manullayAddRow = function(manuallyAddedFirstName, manuallyAddedLastName, manuallyAddedEmailAddress) {

        var manuallyAddedObject = {
          'firstName': manuallyAddedFirstName,
          'lastName': manuallyAddedLastName,
          'email': manuallyAddedEmailAddress
        };

        //$scope.emailList.uniqueUsers.push(manuallyAddedObject);
        $scope.manuallyAddedFirstName = undefined;
        $scope.manuallyAddedLastName = undefined;
        $scope.manuallyAddedEmailAddress = undefined;

        $scope.isDuplicateValuesShowing = false;
        $scope.isWarningMsgCanceled = false;
        sendManuallyAddedRow(manuallyAddedObject);
      }

      $scope.resolveDuplicateValues = function(deletedDuplicateData) {
        angular.forEach($scope.emailList.duplicateUsers, function(duplicateData, duplicateDataKey) {

          var idx = duplicateData.users.indexOf(deletedDuplicateData);

          // is currently selected
          if (idx > -1) {
            duplicateData.users.splice(idx, 1);
          }

          if (duplicateData.users.length === 1) {
            $scope.emailList.uniqueUsers.push(duplicateData.users[0]);
            duplicateData.users.splice(0, 1);
          }

        });

      }

      $scope.deleteUniqueRow = function(csvData) {

        var idx = $scope.emailList.uniqueUsers.indexOf(csvData);
        // is currently selected
        if (idx > -1) {
          $scope.emailList.uniqueUsers.splice(idx, 1);
        }
      }

      $scope.deleteDuplicateRow = function(bundleIndex, recordIndex) {
        $scope.emailList.duplicateUsers[bundleIndex].users.splice(recordIndex, 1);
        if ($scope.emailList.duplicateUsers[bundleIndex].users.length == 1) {
          $scope.emailList.uniqueUsers.push($scope.emailList.duplicateUsers[bundleIndex].users[0]);
          $scope.emailList.duplicateUsers[bundleIndex].users.splice(0, 1);
          $scope.emailList.duplicateUsers.splice(bundleIndex, 1);
        }
      }


      $scope.submitListEmployee = function() {

        $scope.listEmployee.externalUsers = $scope.emailList.uniqueUsers;

        if ($scope.emailList.duplicateUsers.length > 0) {
          var modalInstance = modalService.externalListDuplicateValidation();
          modalInstance.result.then(function(result) {
            if (result.save === true) {
              saveList();
            } else {
              $scope.showDuplicateValues();
            }
          });
        } else {
          saveList();
        }
      }

      function saveList() {
        listEmployeeService.createlistEmployee($scope.listEmployee).then(function(data) {
          alertsService.addAlert({
            title: 'Success',
            message: 'List Employee "' + $scope.listEmployee.title + '" successfully created',
            type: 'success',
            removeOnStateChange: 2
          });
          $state.go('index.secured.listsemployee.search');
        }, function(err) {
          //console.error('Could not create project', err);
        });
      }



    }
  ]);

})(angular.module('aet.screens.listsemployee'));
